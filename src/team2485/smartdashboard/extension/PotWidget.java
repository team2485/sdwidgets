package team2485.smartdashboard.extension;

import edu.wpi.first.smartdashboard.gui.*;
import edu.wpi.first.smartdashboard.properties.Property;
import edu.wpi.first.smartdashboard.types.DataType;
import java.awt.Color;
import javax.swing.border.LineBorder;

public class PotWidget extends Widget {
    public static final String NAME = "Pot Widget";
    public static final DataType[] TYPES = { DataType.STRING };
    
    private static LineBorder state0, state1, state2;

    @Override
    public void setValue(Object o) {
        final String[] vals = ((String)o).split(",");
        this.setPotState(vals[0]);
        this.setPotValue(Integer.parseInt(vals[1]));
        if (vals.length > 2) {
            this.setReadyState(Boolean.parseBoolean(vals[2]) ? 2 : 1);
        }
        else this.setReadyState(0);
    }

    @Override
    public void init() {
        initComponents();
    }

    @Override
    public void propertyChanged(Property prprt) {
    }

    private void setPotValue(int potValue) {
        this.valueText.setText("  " + potValue);
    }

    private void setPotState(String potName) {
        labelText.setText(potName.toUpperCase() + "  ");
        if (potName.toLowerCase().startsWith("manual"))
            labelText.setBackground(new Color(255, 200, 0));
        else if (potName.toLowerCase().startsWith("auto"))
            labelText.setBackground(new Color(10, 255, 10));
        else
            labelText.setBackground(new Color(50, 50, 255));
    }
    
    private void setReadyState(int ready) {
        switch (ready) {
            case 0:
                if (state0 == null)
                    state0 = new LineBorder(Color.black, 1, true);
                this.setBorder(state0);
                break;
            case 1:
                if (state1 == null)
                    state1 = new LineBorder(Color.red, 5, true);
                this.setBorder(state1);
                break;
            case 2:
                if (state2 == null)
                    state2 = new LineBorder(Color.green, 1, true);
                this.setBorder(state2);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelText = new javax.swing.JLabel();
        valueText = new javax.swing.JLabel();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setPreferredSize(new java.awt.Dimension(300, 50));
        setLayout(new java.awt.BorderLayout());

        labelText.setBackground(new java.awt.Color(255, 153, 51));
        labelText.setFont(new java.awt.Font("BoomBox 2", 0, 18)); // NOI18N
        labelText.setForeground(new java.awt.Color(255, 255, 255));
        labelText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelText.setText("FEEDER  ");
        labelText.setOpaque(true);
        labelText.setPreferredSize(new java.awt.Dimension(200, 50));
        add(labelText, java.awt.BorderLayout.WEST);

        valueText.setBackground(new java.awt.Color(255, 255, 255));
        valueText.setFont(new java.awt.Font("BoomBox 2", 0, 24)); // NOI18N
        valueText.setText("  000");
        valueText.setOpaque(true);
        valueText.setPreferredSize(new java.awt.Dimension(100, 50));
        add(valueText, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelText;
    private javax.swing.JLabel valueText;
    // End of variables declaration//GEN-END:variables
}
